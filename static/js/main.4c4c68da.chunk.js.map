{"version":3,"sources":["selectors/filterFields.js","services/api.js","styles/StoryStyles.js","mappers/mapTime.js","components/Story.jsx","styles/StoriesContainerStyles.js","utils/debounce.js","hooks/useInfiniteScroll.js","constants/index.js","containers/StoriesContainer.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["filterFields","id","by","url","time","title","baseUrl","newStoriesUrl","storyUrl","getStoryIds","a","axios","get","then","data","result","getStory","storyId","StoryWrapper","styled","section","StoryTitle","h1","StoryMeta","div","StoryMetaElement","span","props","color","margin","mapTime","timestamp","seconds","Math","floor","Date","interval","Story","useState","story","setStory","useEffect","data-testid","href","GlobalStyle","createGlobalStyle","StoriesContainerWrapper","main","debounce","func","wait","immediate","args","timeout","callNow","clearTimeout","setTimeout","apply","useInfiniteScroll","loading","setLoading","count","setCount","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener","StoriesContainer","storyIds","setStoryIds","ids","slice","map","key","App","Boolean","location","hostname","match","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4c4c68da.chunk.js","sourcesContent":["export const filterFields = ({id, by, url, time, title} = {}) => ({\r\n    id, by, url, time, title\r\n});","import axios from 'axios';\r\nimport { filterFields } from '../selectors/filterFields'\r\n\r\nexport const baseUrl = 'https://hacker-news.firebaseio.com/v0';\r\nexport const newStoriesUrl = `${baseUrl}/newstories.json`;\r\nexport const storyUrl = `${baseUrl}/item/`;\r\n\r\nexport const getStoryIds = async () => {\r\n  const result = await axios.get(newStoriesUrl)\r\n    .then(({ data }) => data);\r\n\r\n  return result;\r\n};\r\n\r\nexport const getStory = async (storyId) => {\r\n  const result = await axios.get(`${storyUrl}/${storyId}.json`)\r\n    .then(({ data }) => data && filterFields(data));\r\n\r\n  return result;\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const StoryWrapper = styled.section`\r\n    padding-top: 10px;\r\n    margin-bottom: 20px;\r\n    border-top: 1px solid #CCCCCC;\r\n\r\n    &:first-of-type {\r\n        border-top: 0;\r\n    }\r\n\r\n    &:last-of-type {\r\n        margin-bottom: 0;\r\n        padding-bottom: 0;\r\n    }\r\n`;\r\n\r\nexport const StoryTitle = styled.h1`\r\n    margin-bottom: 0.5rem;\r\n    font-size: 1em;\r\n    line-height: 1.5;\r\n    margin: 0 auto 0.5rem auto;\r\n    text-decoration: none;\r\n    font-weight: bold;\r\n\r\n    a {\r\n        color: #2e2e2c;\r\n        background-color: #f8dc3d;\r\n        text-decoration: none;\r\n        padding: 3px;\r\n    }\r\n`;\r\n\r\nexport const StoryMeta = styled.div`\r\n    font-style: italic;\r\n\r\n    > span:not(:first-child):before {\r\n        content: 'â€¢';\r\n        margin: 0 7px;\r\n    }\r\n`;\r\n\r\nexport const StoryMetaElement = styled.span`\r\n   font-weight: bold;\r\n   color: ${props => props.color || '#3F3F3F'};\r\n   margin-left: ${props => props.margin || 0};\r\n\r\n   > span {\r\n       font-weight: normal;\r\n   }\r\n`;\r\n","// Finds out how long ago a timestamp is\r\nconst mapTime = (timestamp) => {\r\n  const seconds = Math.floor((new Date() - timestamp * 1000) / 1000);\r\n\r\n  let interval = Math.floor(seconds / 31536000);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} years ago`;\r\n  }\r\n  interval = Math.floor(seconds / 2592000);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} months ago`;\r\n  }\r\n  interval = Math.floor(seconds / 86400);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} days ago`;\r\n  }\r\n  interval = Math.floor(seconds / 3600);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} hours ago`;\r\n  }\r\n  interval = Math.floor(seconds / 60);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} minutes ago`;\r\n  }\r\n\r\n  return `${Math.floor(seconds)} seconds ago`;\r\n};\r\n\r\nexport default mapTime;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { getStory } from '../services/api';\r\nimport {\r\n  StoryWrapper, StoryTitle, StoryMeta, StoryMetaElement,\r\n} from '../styles/StoryStyles';\r\nimport mapTime from '../mappers/mapTime';\r\n\r\nconst Story = ({ storyId }) => {\r\n  const [story, setStory] = useState({});\r\n\r\n  useEffect(() => {\r\n    getStory(storyId).then((data) => {\r\n      data && data.url && setStory(data);\r\n    });\r\n  }, []);\r\n\r\n  return story && story.url ? (\r\n    <StoryWrapper data-testid=\"story\">\r\n      <StoryTitle>\r\n        <a href={story.url}>{story.title}</a>\r\n      </StoryTitle>\r\n\r\n      <StoryMeta>\r\n        <span>\r\n\r\n          <StoryMetaElement data-testid=\"story-by\" color=\"#000\">\r\n            By:\r\n            <span>\r\n              {' '}\r\n              {story.by}\r\n            </span>\r\n          </StoryMetaElement>\r\n\r\n          <StoryMetaElement data-testid=\"story-time\" margin=\"10px\" color=\"#000\">\r\n            Time:\r\n            <span>\r\n              {' '}\r\n              {mapTime(story.time)}\r\n            </span>\r\n          </StoryMetaElement>\r\n\r\n        </span>\r\n      </StoryMeta>\r\n    </StoryWrapper>\r\n  ) : null;\r\n};\r\n\r\nexport default Story;\r\n","import styled, { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        -webkit-box-sizing: border-box;\r\n            box-sizing:border-box;\r\n    }\r\n    *, *:before, *:after {\r\n        -webkit-box-sizing: inherit;\r\n        box-sizing: inherit\r\n    }\r\n\r\n    body {\r\n        margin: 0;\r\n        padding: 0;\r\n        line-height: 1;\r\n        color: #202020;\r\n        background-color: #FAFAFE;\r\n        font-family: Arial, Helvetica, sans-serif;\r\n        font-size: 16px;\r\n    }\r\n\r\n    ul {\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n`;\r\n\r\nexport const StoriesContainerWrapper = styled.main`\r\n    max-width: 1140px;\r\n    padding: 20px 15px;\r\n    margin: auto;\r\n`;\r\n","const debounce = (func, wait, immediate, args) => {\r\n  let timeout;\r\n\r\n  return () => {\r\n    const context = this;\r\n    const callNow = immediate && !timeout;\r\n    const later = () => {\r\n      timeout = null;\r\n      if (!immediate) func.apply(context, args);\r\n    };\r\n\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n\r\n    if (callNow) func.apply(context, args);\r\n  };\r\n};\r\n\r\nexport default debounce;\r\n","import { useState, useEffect } from 'react';\r\nimport { MAX_STORIES, STORY_INCREMENT } from '../constants/index';\r\nimport debounce from '../utils/debounce';\r\n\r\nconst useInfiniteScroll = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [count, setCount] = useState(STORY_INCREMENT);\r\n\r\n  const handleScroll = debounce(() => {\r\n    if (window.innerHeight\r\n        + document.documentElement.scrollTop\r\n        !== document.documentElement.offsetHeight\r\n        || loading) {\r\n      return false;\r\n    }\r\n    setLoading(true);\r\n  }, 100);\r\n\r\n  useEffect(() => {\r\n    if (!loading) return;\r\n\r\n    if (count + STORY_INCREMENT >= MAX_STORIES) {\r\n      setCount(MAX_STORIES);\r\n    } else {\r\n      setCount(count + STORY_INCREMENT);\r\n    }\r\n\r\n    setLoading(false);\r\n  }, [loading]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => window.removeEventListener('scroll', handleScroll);\r\n  }, []);\r\n\r\n  return { count };\r\n};\r\n\r\nexport default useInfiniteScroll;\r\n","export const MAX_STORIES = 500;\r\nexport const STORY_INCREMENT = 30;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { getStoryIds } from '../services/api';\r\nimport Story from '../components/Story';\r\nimport { GlobalStyle, StoriesContainerWrapper } from '../styles/StoriesContainerStyles';\r\nimport useInfiniteScroll from '../hooks/useInfiniteScroll';\r\n\r\nconst StoriesContainer = () => {\r\n  const [storyIds, setStoryIds] = useState([]);\r\n  const { count } = useInfiniteScroll();\r\n\r\n  useEffect(() => {\r\n    getStoryIds().then((ids) => {\r\n      ids && setStoryIds(ids);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <StoriesContainerWrapper>\r\n        <h1>Hackernews</h1>\r\n\r\n        {storyIds.slice(0, count).map((storyId) => <Story key={storyId} storyId={storyId} />)}\r\n      </StoriesContainerWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StoriesContainer;\r\n","import React, { useState, useEffect } from 'react';\r\nimport StoriesContainer from './containers/StoriesContainer';\r\n\r\nconst App = () => {\r\n  return (\r\n    <StoriesContainer />\r\n  )\r\n};\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nrender(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}